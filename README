Simple NAT README
Gabriele Fisher
10/30/17

USAGE
=====

First make the project in this directory:
> make

Then, run the nat with the nat_config and flow files provided as arguments:
> ./nat nat_config.txt flow.txt

DESIGN CHOICES
==============

I decided to store an external IP-port mapping to an internal IP-port in the
struct nat_table_entry. Instead of using a map library, I found that structs
lent themselves to code clarity and easy usage.

These structs are stored in a series of linkedlists, given their fast insert
times. I choose to maintain separate lists of
  (1) Exact external IP addr-port pairs,
  (2) Exact IP addr with wildcard port,
  (3) Wildcard IP addr with exact port, and
  (4) Wildcard IP with wildcard port (a catch-all option, if provided in the
      nat_config.txt file).

Using multiple linked lists allowed my simple NAT to first check if exact
external IP addr-port pair matches existed; if not, the NAT then considers
wildcard options stored in other linked lists. If exact IP addr-port pairs were
mixed with wildcard entries, the NAT may have returned a wildcard entry before
a more precise entry that happened to be stored later in the linked list.
One way to have worked around this intermingling is to have added any wildcard
entries to the end of one shared linked list, so they are considered last, but
this would have required an O(n) traversal. Maintaining separate linked lists
for exact and wildcard entries allowed for a simple O(1) insertion process
instead. (I could always just add new entries to the beginning of the
appropriate linked list).

FUTURE REFINEMENTS
==================

If I were to improve on this simple NAT, I would have not stored IP addresses
as strings, but rather have used the <arpa/inet.h> library to translate IP
addrs into uint32_t values; IP addresses are generally treated as unsigned ints
as to avoid any edge cases with comparing strings.

Also, strtok() is not thread-safe, and in a future iteration of this NAT, I
would have specifically used thread-safe functions to open up parallelization
opportunities for speeding up the reading of NAT configuration txt files and
their translation into nat_table_entry structs.

TESTING
=======

I tested my input on a series of nat.txts, including cases where:
  (1) There was an exact IP addr-port pair that would compete with a wildcard_ip
      port or IP pair (e.g. 10.0.1.1:8080 vs 10.0.1.1:* as the external entries)
  (2) There were multiple wildcard IP entries or wildcard port entries
  (3) An exact external IP addr-port pair was redefined later in nat_config.txt;
      my NAT uses the last provided instance given by a certain external IP
      addr-port pair.
  (4) The nat_config.txt file contained a *:* entry, which becomes a fallback
      for all unmatched entries in flow.txt.

If I improve this project, I will add more error handling for malformed input
files.

I also tested my code on valgrind. No memory leaks or errors, just suppressed
memory leaks caused by strtok() (gah, another reason to use strtok_r()...)

[gfisher@gabrieles-mbp illumio]$ valgrind --leak-check=full ./nat nat.txt flow.txt
==70685== Memcheck, a memory error detector
==70685== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==70685== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==70685== Command: ./nat nat.txt flow.txt
==70685==
--70685-- run: /usr/bin/dsymutil "./nat"
==70685==
==70685== HEAP SUMMARY:
==70685==     in use at exit: 35,260 bytes in 417 blocks
==70685==   total heap usage: 532 allocs, 115 frees, 55,052 bytes allocated
==70685==
==70685== LEAK SUMMARY:
==70685==    definitely lost: 0 bytes in 0 blocks
==70685==    indirectly lost: 0 bytes in 0 blocks
==70685==      possibly lost: 0 bytes in 0 blocks
==70685==    still reachable: 0 bytes in 0 blocks
==70685==         suppressed: 35,260 bytes in 417 blocks
==70685==
==70685== For counts of detected and suppressed errors, rerun with: -v
==70685== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 15 from 15)
